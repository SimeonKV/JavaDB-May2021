00. Create Database

You now know how to create database using the GUI of the Workbench. 
Now it's time to create it using SQL queries. In that task (and the several following it)
you will be required to create the database from the previous exercise using only SQL queries. 
Firstly, just create new database named minions.


QUERY ->>> 
CREATE DATABASE `minions`;




01.Create Tables

In the newly created database Minions add table minions (id, name, age). 
Then add new table towns (town_id, name). Set id and town_id columns of both tables to be primary key as constraint, 
id's must be auto increment. Submit yours create table queries in Judge together for both tables (one after another separated by ";") 
as Run queries & check DB.


QUERY ->>> 
USE `minions`;

CREATE TABLE `minions`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(25) NOT NULL,
`age` INT 
);


CREATE TABLE `towns`(
`town_id` INT AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(25) NOT NULL
);


02.Alter Minions Table

Before continuing with the next assignments, rename the town_id to id using Workbench's GUI.Do not submit this query on the Judge System.
Change the structure of the Minions table to have new column town_id that would be of the same type 
as the id column of towns table. Add new constraint that makes town_id foreign key and references to id column of towns table.
Submit your create table query in Judge as MySQL run skeleton, run queries & check DB


QUERY ->>>

//REMOVES THE AUTO INCREMENT EXTRA
ALTER TABLE `towns` MODIFY COLUMN `town_id` INT;
//DROPS THE PRIMARY KEY
ALTER TABLE `towns` DROP PRIMARY KEY;
//RENAMES THE FORMER PRIMARY KEY COLUM FRO `town_id` TO `id`
ALTER TABLE `towns` CHANGE COLUMN `town_id` `id` INT;
//MAKES THE NEWLY NAMED COULMN `id` A PRIMARY KEY
ALTER TABLE `towns` ADD PRIMARY KEY(`id`);
//THEN ADDS THE AUTO_INCREMENT EXTRA TO THE PRIMARY KEY COLUMN
ALTER TABLE `towns` MODIFY COLUMN `id` INT AUTO_INCREMENT;

ALTER TABLE `minions`
ADD COLUMN `town_id` INT;

ALTER TABLE `minions`
ADD FOREIGN KEY(`town_id`) REFERENCES `towns`(`id`);

ALTER TABLE `minions`
MODIFY COLUMN `town_id` INT NOT NULL;

03.Insert Records in Both Tables

Populate both tables with sample records given in the table below.
minions		towns
id	name	age	town_id		id	name
1	Kevin	22	1		1	Sofia
2	Bob	15	3		2	Plovdiv
3	Steward	NULL	2		3	Varna

QUERY ->>>

INSERT INTO towns (id,`name`) VALUES
(1,'Sofia'),
(2,'Plovdiv'),
(3,'Varna');

INSERT INTO minions (id,`name`, age, town_id) VALUES
(1,'Kevin' , 22, 1),
(2,'Bob',15, 3),
(3, 'Steward',NULL, 2);


04.Truncate Table Minions
Delete all the data from the minions table using SQL query.
Submit your query in Judge as Run skeleton, run queries & check DB.

QUERY ->>>

TRUNCATE TABLE `minions`;

5.Drop All Tables

Delete all tables from the minions database using SQL query. 
Submit your query in Judge as Run skeleton, run queries & check DB.


QUERY ->>>

DROP TABLE `minions`;
DROP TABLE `towns`;

06.Create Table People

Using SQL query create table "people" with columns:
•	id – unique number for every person there will be no more than 231-1people. (Auto incremented)
•	name – full name of the person will be no more than 200 Unicode characters. (Not null)
•	picture – image with size up to 2 MB. (Allow nulls)
•	height –  In meters. Real number precise up to 2 digits after floating point. (Allow nulls)
•	weight –  In kilograms. Real number precise up to 2 digits after floating point. (Allow nulls)
•	gender – Possible states are m or f. (Not null)
•	birthdate – (Not null)
•	biography – detailed biography of the person it can contain max allowed Unicode characters. (Allow nulls)
Make id primary key. Populate the table with 5 records.  Submit your CREATE and INSERT statements in Judge as Run queries & check DB.

QUERY ->>>

CREATE TABLE people(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(200) NOT NULL,
`picture` BLOB,
`height` DECIMAL(3,2),
`weight` DECIMAL(5,2),
`gender` ENUM('m','f') NOT NULL,
`birthdate` DATE NOT NULL,
`biography` TEXT
);

INSERT INTO `people`(`id`,`name`,`picture`,`height`,`weight`,`gender`,`birthdate`,`biography`)
VALUES(1,"Maria",NULL,1.73,69.00,'f','1993-02-04',"I am Maria from Bulgaria"),
(2,"Mario",NULL,1.78,70.14,'m','1991-09-14',"I am Mario from Bulgaria"),
(3,"Georgi",NULL,1.83,69.00,'m','1994-02-24',"I am Georgi from Bulgaria"),
(4,"Martina",NULL,1.67,60.10,'f','1993-07-01',"I am Martina from Bulgaria"),
(5,"Dimitar",NULL,1.79,69.00,'m','1990-12-05',"I am Dimitar from Bulgaria");


07. Create Table Users

Using SQL query create table users with columns:
•	id – unique number for every user. There will be no more than 263-1 users. (Auto incremented)
•	username – unique identifier of the user will be no more than 30 characters (non Unicode). (Required)
•	password – password will be no longer than 26 characters (non Unicode). (Required)
•	profile_picture – image with size up to 900 KB. 
•	last_login_time
•	is_deleted – shows if the user deleted his/her profile. Possible states are true or false.
Make id primary key. Populate the table with 5 records. Submit your CREATE and INSERT statements.
Submit your CREATE and INSERT statements as Run queries & check DB.

QUERY ->>>

CREATE TABLE `users`(
`id` INT AUTO_INCREMENT PRIMARY KEY,
`username` VARCHAR(30) UNIQUE NOT NULL,
`password` VARCHAR(26) NOT NULL,
`profile_picture` BLOB,
`last_login_time` timestamp,
`is_deleted` BOOLEAN
);

INSERT INTO `users`(`id`,`username`,`password`,`profile_picture`,`last_login_time`,`is_deleted`)
VALUES(1,'master_force','secretPass',NULL,'2021-02-25',TRUE),
(2,'fire_lion','secretPass',NULL,'2021-05-29',FALSE),
(3,'homiee','noSecretPass',NULL,'2021-05-25',FALSE),
(4,'HelloWorld','worldHello',NULL,'2021-02-27',False),
(5,'I_Like_Java','BigJAVA',NULL,'2021-02-20',TRUE);

SELECT * FROM `users`;


08. Change Primary Key

Using SQL queries modify table users from the previous task. 
First remove current primary key then create new primary key that would be combination of fields id and username. 
The initial primary key name on id is pk_users. Submit your query in Judge as Run skeleton, run queries & check DB.

QUERY ->>>

ALTER TABLE `users` MODIFY `id` INT;
ALTER TABLE `users` DROP PRIMARY KEY;
ALTER TABLE `users` ADD PRIMARY KEY(`id`,`username`);

09. Set Default Value of a Field
Using SQL queries modify table users. Make the default value of last_login_time field to be the current time. 
Submit your query in Judge as Run skeleton, run queries & check DB.

QUERY ->>>

ALTER TABLE `users` MODIFY `last_login_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

10. Set Unique Field

Using SQL queries modify table users. Remove username field from the primary key so only the field id would be primary key. 
Now add unique constraint to the username field. The initial primary key name on (id, username) is pk_users.
Submit your query in Judge as Run skeleton, run queries & check DB.

QUERY ->>>

ALTER TABLE `users`
DROP PRIMARY KEY,
ADD CONSTRAINT PRIMARY KEY (`id`),
ADD CONSTRAINT UNIQUE (`username`);

11. Movies Database

Using SQL queries create Movies database with the following entities:
•	directors (id, director_name, notes) 
o	director_name cannot be null
•	genres (id, genre_name, notes) 
o	genre_name cannot be null
•	categories (id, category_name, notes)  
o	category_name cannot be null
•	movies (id, title, director_id, copyright_year, length, genre_id, category_id, rating, notes)
o	title cannot be null
Set most appropriate data types for each column. Set primary key to each table.
Populate each table with 5 records. Make sure the columns that are present in 2 tables would be of the same data type.
Consider which fields are always required and which are optional. Submit your CREATE TABLE and INSERT statements as Run queries & check DB.

QUERY ->>>

CREATE DATABASE `movies`;
USE `movies`;

CREATE TABLE `directors`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`director_name` VARCHAR(25) NOT NULL,
`notes` TEXT(250) NULL
);

CREATE TABLE `genres`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`genre_name` VARCHAR(25) NOT NULL,
`notes` TEXT(250) NULL
);

CREATE TABLE `categories`(
`id` INT PRIMARY KEY AUTO_INCREMENT,
`category_name` VARCHAR(25) NOT NULL,
`notes` TEXT(250) NULL
);

CREATE TABLE `movies`(
`id` INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`title` VARCHAR(25) NOT NULL,
`director_id` INT UNSIGNED NOT NULL,
`copyright_year` YEAR NULL,
`length` DECIMAL(3,2) UNSIGNED NOT NULL,
`gernre_id` INT UNSIGNED NOT NULL,
`category_id` INT UNSIGNED NOT NULL,
`rating` DOUBLE NOT NULL DEFAULT 0,
`notes` TEXT
);

INSERT INTO `directors`(`id`,`director_name`,`notes`) 
VALUES(1,"Jhon Travolta","An actor and a dirctor"),
(2,"Jimmy Jhon","Unkown director"),
(3,"Super Mario",NULL),
(4,"Jhon Doe","Another Jhon Doe"),
(5,"Alex Alex","He also likes coding");


INSERT INTO `genres`(`id`,`genre_name`,`notes`)
VALUES(1,"Comedy","Commedies are fun !!!"),
(2,"Horrors","Horros are not for people who get scared easily!"),
(3,"Cartoons","Who doesn't like cartoons?!?"),
(4,"Drama","No drama,pls!"),
(5,"Documentary","Borning");


INSERT INTO `categories`(`id`,`category_name`,`notes`)
VALUES(1,"Cat one",NULL),
(2,"Cat two",NULL),
(3,"Cat three",NULL),
(4,"Cat four",NULL),
(5,"Cat five",NULL);


INSERT INTO `movies`(`id`,`title`,`director_id`,`copyright_year`,`length`,`genre_id`,`category_id`,`rating`,`notes`)
VALUES(1,"Super Movie",1,2004,2.00,1,1,1,NULL),
(2,"Scary Movie",2,2005,2.10,2,2,2,NULL),
(3,"Drama Movie",3,2003,3.00,3,3,3,NULL),
(4,"Boring Movie",4,2009,1.00,2,4,2,NULL),
(5,"Last Movie",5,2005,5.00,5,5,5,NULL);

ALTER TABLE `movies` CHANGE COLUMN gernre_id `genre_id` INT UNSIGNED NOT NULL;

13. Basic Insert

Now create bigger database called soft_uni. You will use database in the future tasks. It should hold information about
    • towns (id, name)
    • addresses (id, address_text, town_id)
    • departments (id, name)
    • employees (id, first_name, middle_name, last_name, job_title, department_id, hire_date, salary, address_id)
Id columns are auto incremented starting from 1 and increased by 1 (1, 2, 3, 4…). Make sure you use appropriate data types for each column. Add primary and foreign keys as constraints for each table. Use only SQL queries. Consider which fields are always required and which are optional.
Do not submit creation of database only the insert statements.

Use the SoftUni database and insert some data using SQL queries.
name	job_title	department	hire_date	salary
Ivan Ivanov Ivanov	.NET Developer	Software Development	01/02/2013	3500.00
Petar Petrov Petrov	Senior Engineer	Engineering	02/03/2004	4000.00
Maria Petrova Ivanova	Intern	Quality Assurance	28/08/2016	525.25
Georgi Terziev Ivanov	CEO	Sales	09/12/2007	3000.00
Peter Pan Pan	Intern	Marketing	28/08/2016	599.88
•	towns: Sofia, Plovdiv, Varna, Burgas
•	departments: Engineering, Sales, Marketing, Software Development, Quality Assurance
•	employees:

Submit your INSERT queries in Judge as Run skeleton, run queries & check DB.

Queries ->>>

CREATE DATABASE `soft_uni`;
USE `soft_uni`;


CREATE TABLE `towns`(
`id` INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(25) NOT NULL
);

CREATE TABLE `addresses`(
`id` INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`address_text` VARCHAR(50) NOT NULL,
`town_id` INT UNSIGNED NOT NULL,
FOREIGN KEY(`town_id`) REFERENCES `towns`(`id`)
);

CREATE TABLE `departments`(
`id` INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(20) NOT NULL
);

CREATE TABLE `employees`(
`id` INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(20) NOT NULL,
`middle_name` VARCHAR(20) NOT NULL,
`last_name` VARCHAR(20) NOT NULL,
`job_title` VARCHAR(20) NOT NULL,
`department_id` INT UNSIGNED NOT NULL,
`hire_date` DATE NOT NULL,
`salary` DECIMAL NOT NULL,
`address_id` INT UNSIGNED NOT NULL,
FOREIGN KEY(`department_id`) REFERENCES `departments`(`id`),
FOREIGN KEY(`address_id`) REFERENCES `addresses`(`id`) 
);

ALTER TABLE `employees` MODIFY `address_id` INT UNSIGNED;

INSERT INTO `towns`(`name`)
VALUES("Sofia"),("Plovdiv"),("Varna"),("Burgas");


INSERT INTO `departments`(`name`)
VALUES("Engineering"),("Sales"),("Marketing"),("Software Development"),("Quality Assurance");

INSERT INTO `employees`(`first_name`,`middle_name`,`last_name`,`job_title`,`department_id`,`hire_date`,`salary`)
VALUES("Ivan","Ivanov","Ivanov",".NET Developer",3,"2013-02-01",3500.00),
("Petar","Petrov","Petrov","Senior Engineer",1,"2004-03-02",4000.00),
("Maria","Petrova","Ivanova","Intern",5,"2016-08-28",525.25),
("Georgi","Terziev","Ivanov","CEO",2,"2007-12-09",3000.00),
("Peter","Pan","Pan","Intern",3,"2016-08-28",599.88);

14. Basic Select All Fields
Use the soft_uni database and first select all records from the towns, then from departments and finally from employees table.
Use SQL queries and submit them to Judge at once. Submit your query statements as Prepare DB & Run queries.

Query ->>>

SELECT * FROM towns;
SELECT * FROM departments;
SELECT * FROM employees;









